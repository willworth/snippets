//Nested for loops
const myArray = [1,2,4,5,6,7,8,9,10]
const goalNum = 5;

const finder = function (arr){
  for (i=0; i<arr.length; i++){
    console.log('logging outer i =', i)
    for (j=0; j<arr.length;j++){
      if (i + j === goalNum){

      console.log(`${i} and ${j} are equal to ${goalNum}!`)
      }
    }
  }
}

finder(myArray)

//////////////////////


for checking if x in arr1 is in arr2, we can create an object.  this is how js does hashtable lookups.

const array1 = ['x','s','t','w','y'];
const array2 = ['a','n','r','q','p'];




function containsCommonItem (arr1, arr2){
    let map = {};
    for (let i=0; i<arr1.length; i++){
        if (!map[arr1[i]]){
            const item = arr1[i];
            map[item] = true;
        }
    }
    for (j=0; j< arr2.length;j++){
      if(map[arr2[j]]){
        return true;
      }
    }
    return false;
}    

containsCommonItem(array1,array2);


/////////////////////////////


The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value. 

containsCommonItem2(array1,array2);

function containsCommonItem2(arr1,arr2){
  return arr1.some(item => arr2.includes
  (item))
}

////////////////////////